# -*- coding: utf-8 -*-
"""IPL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wGAQf7i7P35G5isTs75MCllKR51h6xCd
"""

import pandas as pd
ipl_data = pd.read_csv("deliveries.csv")

# Top 5 teams with the most runs scored in the dataset


top_teams = ipl_data.groupby('batting_team')['total_runs'].sum().nlargest(5)
print("Top 5 teams with the most runs scored:\n", top_teams)

# Player with the most runs scored


top_batter = ipl_data.groupby('batter')['batsman_runs'].sum().idxmax()
print("Player with the most runs scored:", top_batter)

# Bowler with the most wickets


top_bowler = ipl_data[ipl_data['is_wicket'] == 1].groupby('bowler').size().idxmax()
print("Bowler with the most wickets:", top_bowler)

# Most common mode of dismissal


common_dismissal = ipl_data['dismissal_kind'].value_counts().idxmax()
print("Most common mode of dismissal:", common_dismissal)

# Average runs scored in each over across all matches


avg_runs_per_over = ipl_data.groupby('over')['total_runs'].mean()
print("Average runs scored in each over:\n", avg_runs_per_over)

# Total extras conceded by each team


extras_by_team = ipl_data.groupby('bowling_team')['extra_runs'].sum()
print("Total extras conceded by each team:\n", extras_by_team)

# Number of sixes hit by each player


sixes = ipl_data[ipl_data['batsman_runs'] == 6].groupby('batter').size()
print("Number of sixes hit by each player:\n", sixes)

# Matches with the highest total runs scored


highest_scoring_matches = ipl_data.groupby('match_id')['total_runs'].sum().nlargest(5)
print("Matches with the highest total runs scored:\n", highest_scoring_matches)

# Distribution of wicket types across the dataset


wicket_distribution = ipl_data['dismissal_kind'].value_counts()
print("Distribution of wicket types:\n", wicket_distribution)

# Top 5 bowlers conceding the most runs


top_conceding_bowlers = ipl_data.groupby('bowler')['total_runs'].sum().nlargest(5)
print("Top 5 bowlers conceding the most runs:\n", top_conceding_bowlers)

# Top partnerships (by runs) in a match


partnerships = ipl_data.groupby(['match_id', 'batter', 'non_striker'])['total_runs'].sum().nlargest(5)
print("Top partnerships (by runs):\n", partnerships)

# Find the total number of boundaries (fours) hit by each player


fours = ipl_data[ipl_data['batsman_runs'] == 4].groupby('batter').size()
print("Total number of boundaries (fours) hit by each player:\n", fours)

# Player dismissed most times by a specific bowler


dismissal_combinations = ipl_data[ipl_data['is_wicket'] == 1].groupby(['bowler', 'player_dismissed']).size().idxmax()
print("Player dismissed most times by a specific bowler:", dismissal_combinations)

# Most consistent batsmen (average runs per match)


consistent_batsmen = ipl_data.groupby(['batter', 'match_id'])['batsman_runs'].sum().groupby('batter').mean().nlargest(5)
print("Most consistent batsmen (average runs per match):\n", consistent_batsmen)

# Number of dot balls bowled by each team


dot_balls = ipl_data[ipl_data['total_runs'] == 0].groupby('bowling_team').size()
print("Number of dot balls bowled by each team:\n", dot_balls)

# Top 5 matches with the highest number of wickets taken


top_wicket_matches = ipl_data[ipl_data['is_wicket'] == 1].groupby('match_id').size().nlargest(5)
print("Top 5 matches with the highest number of wickets:\n", top_wicket_matches)

# Total number of wides bowled by each team


wides_by_team = ipl_data[ipl_data['extras_type'] == 'wides'].groupby('bowling_team').size()
print("Total number of wides bowled by each team:\n", wides_by_team)

# Players dismissed on the first ball they faced


first_ball_dismissals = ipl_data[(ipl_data['ball'] == 1) & (ipl_data['is_wicket'] == 1)]['player_dismissed'].unique()
print("Players dismissed on the first ball they faced:\n", first_ball_dismissals)

# Top 5 fielders with the most catches


top_fielders = ipl_data[ipl_data['dismissal_kind'] == 'caught'].groupby('fielder').size().nlargest(5)
print("Top 5 fielders with the most catches:\n", top_fielders)

# Number of maiden overs bowled by each bowler


maiden_overs = ipl_data.groupby(['bowler', 'over'])['total_runs'].sum()
maiden_overs = maiden_overs[maiden_overs == 0].reset_index().groupby('bowler').size()
print("Number of maiden overs bowled by each bowler:\n", maiden_overs)